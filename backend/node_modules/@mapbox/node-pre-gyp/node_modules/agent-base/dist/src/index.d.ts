/// <reference types="node" />
import net from 'net';
import http from 'http';
import https from 'https';
import { Duplex, PassThrough } from 'stream';
import { EventEmitter } from 'events';

declare function createAgent(opts?: createAgent.AgentOptions): createAgent.Agent;
declare function createAgent(callback: createAgent.AgentCallback, opts?: createAgent.AgentOptions): createAgent.Agent;

declare namespace createAgent {
    interface ClientRequest extends http.ClientRequest {
        _last?: boolean;
        _hadError?: boolean;
        method: string;
    }

    interface AgentRequestOptions {
        host?: string;
        path?: string;
        port: number;
    }

    interface HttpRequestOptions extends AgentRequestOptions, Omit<http.RequestOptions, keyof AgentRequestOptions> {
        secureEndpoint: false;
    }

    interface HttpsRequestOptions extends AgentRequestOptions, Omit<https.RequestOptions, keyof AgentRequestOptions> {
        secureEndpoint: true;
    }

    type RequestOptions = HttpRequestOptions | HttpsRequestOptions;

    type AgentLike = Pick<createAgent.Agent, 'addRequest'> | http.Agent;

    type AgentCallbackReturn = Duplex | AgentLike;

    type AgentCallbackCallback = (err?: Error | null, socket?: createAgent.AgentCallbackReturn) => void;

    type AgentCallbackPromise = (req: createAgent.ClientRequest, opts: createAgent.RequestOptions) => createAgent.AgentCallbackReturn | Promise<createAgent.AgentCallbackReturn>;

    type AgentCallback = typeof Agent.prototype.callback;

    type AgentOptions = {
        timeout?: number;
    };

    /**
     * Base `http.Agent` implementation.
     * No pooling/keep-alive is implemented by default.
     *
     * @param {Function} callback
     * @api public
     */
    class Agent extends EventEmitter {
        timeout: number | null;
        maxFreeSockets: number;
        maxTotalSockets: number;
        maxSockets: number;
        sockets: {
            [key: string]: net.Socket[];
        };
        freeSockets: {
            [key: string]: net.Socket[];
        };
        requests: {
            [key: string]: http.IncomingMessage[];
        };
        options: https.AgentOptions;
        private promisifiedCallback?;
        private explicitDefaultPort?;
        private explicitProtocol?;

        constructor(callback?: createAgent.AgentCallback | createAgent.AgentOptions, _opts?: createAgent.AgentOptions);
        get defaultPort(): number;
        set defaultPort(v: number);
        get protocol(): string;
        set protocol(v: string);
        callback(req: createAgent.ClientRequest, opts: createAgent.RequestOptions, fn: createAgent.AgentCallbackCallback): void;
        callback(req: createAgent.ClientRequest, opts: createAgent.RequestOptions): createAgent.AgentCallbackReturn | Promise<createAgent.AgentCallbackReturn>;
        /**
         * Called by node-core's "_http_client.js" module when creating
         * a new HTTP request with this Agent instance.
         *
         * @api public
         */
        addRequest(req: ClientRequest, _opts: RequestOptions): void;
        freeSocket(socket: net.Socket, opts: AgentOptions): void;
        destroy(): void;
        destroySockets(): void;
    }
}

export = createAgent;

// Implementation of missing methods

(Agent.prototype as any).defaultPort = 80;

(Agent.prototype as any).protocol = 'http:';

(Agent.prototype as any).constructor = Agent;

(Agent.prototype as any).callback = function (this: Agent, req: ClientRequest, opts: RequestOptions, fn?: AgentCallbackCallback): void | AgentCallbackReturn {
    if (typeof opts === 'function') {
        fn = opts;
        opts = {};
    }

    if (this.promisifiedCallback) {
        return this.promisifiedCallback(req, opts).then(
            (socket: AgentCallbackReturn) => {
                fn && fn(null, socket);
                return socket;
            },
            (err: Error) => {
                fn && fn(err);
                return undefined;
            }
        );
    }

    const { secureEndpoint, ...httpOptions } = opts;
    const callback = fn || (() => {});

    if (secureEndpoint) {
        const agent = new https.Agent(this.options);
        const req_ = https.request(httpOptions, (res) => {
            callback(null, { ...agent, res });
        });
        req_.on('error', callback);
        req_.end();
    } else {
        const agent = new http.Agent(this.options);
        const req_ = http.request(httpOptions, (res) => {
            callback(null, { ...agent, res
