/// <reference types="node" />
import { Agent, RequestOptions } from 'http';
import { URL } from 'url';
import { GaxiosOptions, GaxiosPromise } from './common';

export declare class Gaxios {
  protected agentCache: Map<string, Agent | ((parsedUrl: URL) => Agent)>;
  /** Default HTTP options that will be used for every HTTP request. */
  defaults: GaxiosOptions;

  constructor(defaults?: GaxiosOptions);

  /**
   * Perform an HTTP request with the given options.
   * @param opts Set of HTTP options that will be used for this HTTP request.
   */
  request<T = any>(opts?: GaxiosOptions & { responseType?: 'json' }): GaxiosPromise<T>;

  private _defaultAdapter;

  /**
   * Internal, retryable version of the `request` method.
   * @param opts Set of HTTP options that will be used for this HTTP request.
   */
  protected _request<T = any>(
    opts?: GaxiosOptions & { responseType?: 'json' }
  ): GaxiosPromise<T>;

  private getResponseData(
    response: NodeJS.HttpResponse & {
      headers: IncomingHttpHeaders;
    }
  ): Promise<any>;

  /**
   * Validates the options, and merges them with defaults.
   * @param opts The original options passed from the client.
   */
  private validateOpts(opts: GaxiosOptions): void;

  /**
   * By default, throw for any non-2xx status code
   * @param status status code from the HTTP response
   */
  private validateStatus(status: number): void;

  /**
   * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)
   * @param params key value pars to encode
   */
  private paramsSerializer(params: { [key: string]: any }): string;

  private translateResponse(
    response: NodeJS.HttpResponse & {
      headers: IncomingHttpHeaders;
    },
    data: any,
    encoding: BufferEncoding
  ): any;

  /**
   * Attempts
